package org.me.ByBlueHeart.HDebugClient.Modules.Exploit;

import net.blueheart.hdebug.event.EventState;
import net.blueheart.hdebug.event.EventTarget;
import net.blueheart.hdebug.event.MotionEvent;
import net.blueheart.hdebug.features.module.Module;
import net.blueheart.hdebug.features.module.ModuleCategory;
import net.blueheart.hdebug.features.module.ModuleInfo;
import org.me.ByBlueHeart.HDebugClient.Utils.MovementUtils;
import net.blueheart.hdebug.value.ListValue;
import net.minecraft.client.settings.GameSettings;
import net.minecraft.network.play.client.C0BPacketEntityAction;

@ModuleInfo(name = "AutoDisabler", description = "Automatically sneaks all the time.", category = ModuleCategory.EXPLOIT)
public class AutoDisabler extends Module {

    public final ListValue modeValue = new ListValue("Mode", new String[] { "ACR","Vanilla","Switch","Legit" }, "ACR");

    private boolean sneaked;

    public void onEnable() {
        if (mc.thePlayer == null)
            return;
        if ("vanilla".equalsIgnoreCase(this.modeValue.get()))
            mc.getNetHandler().addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SNEAKING));
    }

    @EventTarget
    public void onMotion(MotionEvent event) {
        if (MovementUtils.isMoving()) {
            if (this.sneaked) {
                onDisable();
                this.sneaked = false;
            }
            return;
        }
        this.sneaked = true;
        switch ((this.modeValue.get()).toLowerCase()) {
            case "legit":
                mc.gameSettings.keyBindSneak.pressed = true;
                break;
            case "switch":
                switch (event.getEventState()) {
                    case PRE:
                        if (!MovementUtils.isMoving())
                            return;
                        mc.getNetHandler().addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SNEAKING));
                        mc.getNetHandler().addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SNEAKING));
                        break;
                    case POST:
                        mc.getNetHandler().addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SNEAKING));
                        mc.getNetHandler().addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SNEAKING));
                        break;
                }
                break;
            case "acr":
                if (event.getEventState() == EventState.PRE)
                    break;
                mc.getNetHandler().addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SNEAKING));
                break;
        }
    }

    public void onDisable() {
        if (mc.thePlayer == null)
            return;
        switch (this.modeValue.get().toLowerCase()) {
            case "legit":
                if (!GameSettings.isKeyDown(mc.gameSettings.keyBindSneak))
                    mc.gameSettings.keyBindSneak.pressed = false;
                break;
            case "vanilla":
            case "switch":
            case "acr":
                mc.getNetHandler().addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SNEAKING));
                break;
        }
        super.onDisable();
    }
}

